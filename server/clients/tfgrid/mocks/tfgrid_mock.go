// Code generated by MockGen. DO NOT EDIT.
// Source: ./clients/tfgrid/tfgrid.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	graphql "github.com/threefoldtech/tfgrid-sdk-go/grid-client/graphql"
	client "github.com/threefoldtech/tfgrid-sdk-go/grid-client/node"
	workloads "github.com/threefoldtech/tfgrid-sdk-go/grid-client/workloads"
	types "github.com/threefoldtech/tfgrid-sdk-go/grid-proxy/pkg/types"
)

// MockTFGridClient is a mock of TFGridClient interface.
type MockTFGridClient struct {
	ctrl     *gomock.Controller
	recorder *MockTFGridClientMockRecorder
}

// MockTFGridClientMockRecorder is the mock recorder for MockTFGridClient.
type MockTFGridClientMockRecorder struct {
	mock *MockTFGridClient
}

// NewMockTFGridClient creates a new mock instance.
func NewMockTFGridClient(ctrl *gomock.Controller) *MockTFGridClient {
	mock := &MockTFGridClient{ctrl: ctrl}
	mock.recorder = &MockTFGridClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTFGridClient) EXPECT() *MockTFGridClientMockRecorder {
	return m.recorder
}

// CancelDeployment mocks base method.
func (m *MockTFGridClient) CancelDeployment(ctx context.Context, dl *workloads.Deployment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelDeployment", ctx, dl)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelDeployment indicates an expected call of CancelDeployment.
func (mr *MockTFGridClientMockRecorder) CancelDeployment(ctx, dl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelDeployment", reflect.TypeOf((*MockTFGridClient)(nil).CancelDeployment), ctx, dl)
}

// CancelProject mocks base method.
func (m *MockTFGridClient) CancelProject(ctx context.Context, projectName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelProject", ctx, projectName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelProject indicates an expected call of CancelProject.
func (mr *MockTFGridClientMockRecorder) CancelProject(ctx, projectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelProject", reflect.TypeOf((*MockTFGridClient)(nil).CancelProject), ctx, projectName)
}

// DeployDeployment mocks base method.
func (m *MockTFGridClient) DeployDeployment(ctx context.Context, d *workloads.Deployment) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeployDeployment", ctx, d)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeployDeployment indicates an expected call of DeployDeployment.
func (mr *MockTFGridClientMockRecorder) DeployDeployment(ctx, d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployDeployment", reflect.TypeOf((*MockTFGridClient)(nil).DeployDeployment), ctx, d)
}

// DeployGWFQDN mocks base method.
func (m *MockTFGridClient) DeployGWFQDN(ctx context.Context, gw *workloads.GatewayFQDNProxy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeployGWFQDN", ctx, gw)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeployGWFQDN indicates an expected call of DeployGWFQDN.
func (mr *MockTFGridClientMockRecorder) DeployGWFQDN(ctx, gw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployGWFQDN", reflect.TypeOf((*MockTFGridClient)(nil).DeployGWFQDN), ctx, gw)
}

// DeployGWName mocks base method.
func (m *MockTFGridClient) DeployGWName(ctx context.Context, gw *workloads.GatewayNameProxy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeployGWName", ctx, gw)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeployGWName indicates an expected call of DeployGWName.
func (mr *MockTFGridClientMockRecorder) DeployGWName(ctx, gw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployGWName", reflect.TypeOf((*MockTFGridClient)(nil).DeployGWName), ctx, gw)
}

// DeployK8sCluster mocks base method.
func (m *MockTFGridClient) DeployK8sCluster(ctx context.Context, k8s *workloads.K8sCluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeployK8sCluster", ctx, k8s)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeployK8sCluster indicates an expected call of DeployK8sCluster.
func (mr *MockTFGridClientMockRecorder) DeployK8sCluster(ctx, k8s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployK8sCluster", reflect.TypeOf((*MockTFGridClient)(nil).DeployK8sCluster), ctx, k8s)
}

// DeployNetwork mocks base method.
func (m *MockTFGridClient) DeployNetwork(ctx context.Context, znet *workloads.ZNet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeployNetwork", ctx, znet)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeployNetwork indicates an expected call of DeployNetwork.
func (mr *MockTFGridClientMockRecorder) DeployNetwork(ctx, znet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployNetwork", reflect.TypeOf((*MockTFGridClient)(nil).DeployNetwork), ctx, znet)
}

// FilterFarms mocks base method.
func (m *MockTFGridClient) FilterFarms(filter types.FarmFilter, pagination types.Limit) ([]types.Farm, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterFarms", filter, pagination)
	ret0, _ := ret[0].([]types.Farm)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FilterFarms indicates an expected call of FilterFarms.
func (mr *MockTFGridClientMockRecorder) FilterFarms(filter, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterFarms", reflect.TypeOf((*MockTFGridClient)(nil).FilterFarms), filter, pagination)
}

// FilterNodes mocks base method.
func (m *MockTFGridClient) FilterNodes(filter types.NodeFilter, pagination types.Limit) ([]types.Node, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterNodes", filter, pagination)
	ret0, _ := ret[0].([]types.Node)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FilterNodes indicates an expected call of FilterNodes.
func (mr *MockTFGridClientMockRecorder) FilterNodes(filter, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterNodes", reflect.TypeOf((*MockTFGridClient)(nil).FilterNodes), filter, pagination)
}

// GetNode mocks base method.
func (m *MockTFGridClient) GetNode(nodeID uint32) (types.NodeWithNestedCapacity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNode", nodeID)
	ret0, _ := ret[0].(types.NodeWithNestedCapacity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNode indicates an expected call of GetNode.
func (mr *MockTFGridClientMockRecorder) GetNode(nodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNode", reflect.TypeOf((*MockTFGridClient)(nil).GetNode), nodeID)
}

// GetNodeClient mocks base method.
func (m *MockTFGridClient) GetNodeClient(nodeID uint32) (*client.NodeClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeClient", nodeID)
	ret0, _ := ret[0].(*client.NodeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeClient indicates an expected call of GetNodeClient.
func (mr *MockTFGridClientMockRecorder) GetNodeClient(nodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeClient", reflect.TypeOf((*MockTFGridClient)(nil).GetNodeClient), nodeID)
}

// GetNodeDomain mocks base method.
func (m *MockTFGridClient) GetNodeDomain(ctx context.Context, nodeID uint32) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeDomain", ctx, nodeID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeDomain indicates an expected call of GetNodeDomain.
func (mr *MockTFGridClientMockRecorder) GetNodeDomain(ctx, nodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeDomain", reflect.TypeOf((*MockTFGridClient)(nil).GetNodeDomain), ctx, nodeID)
}

// GetNodeFarm mocks base method.
func (m *MockTFGridClient) GetNodeFarm(nodeID uint32) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeFarm", nodeID)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeFarm indicates an expected call of GetNodeFarm.
func (mr *MockTFGridClientMockRecorder) GetNodeFarm(nodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeFarm", reflect.TypeOf((*MockTFGridClient)(nil).GetNodeFarm), nodeID)
}

// GetProjectContracts mocks base method.
func (m *MockTFGridClient) GetProjectContracts(ctx context.Context, projectName string) (graphql.Contracts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectContracts", ctx, projectName)
	ret0, _ := ret[0].(graphql.Contracts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectContracts indicates an expected call of GetProjectContracts.
func (mr *MockTFGridClientMockRecorder) GetProjectContracts(ctx, projectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectContracts", reflect.TypeOf((*MockTFGridClient)(nil).GetProjectContracts), ctx, projectName)
}

// LoadDeployment mocks base method.
func (m *MockTFGridClient) LoadDeployment(nodeID uint32, modelName string) (workloads.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadDeployment", nodeID, modelName)
	ret0, _ := ret[0].(workloads.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadDeployment indicates an expected call of LoadDeployment.
func (mr *MockTFGridClientMockRecorder) LoadDeployment(nodeID, modelName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadDeployment", reflect.TypeOf((*MockTFGridClient)(nil).LoadDeployment), nodeID, modelName)
}

// LoadGatewayFQDN mocks base method.
func (m *MockTFGridClient) LoadGatewayFQDN(nodeID uint32, modelName string) (workloads.GatewayFQDNProxy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadGatewayFQDN", nodeID, modelName)
	ret0, _ := ret[0].(workloads.GatewayFQDNProxy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadGatewayFQDN indicates an expected call of LoadGatewayFQDN.
func (mr *MockTFGridClientMockRecorder) LoadGatewayFQDN(nodeID, modelName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadGatewayFQDN", reflect.TypeOf((*MockTFGridClient)(nil).LoadGatewayFQDN), nodeID, modelName)
}

// LoadGatewayName mocks base method.
func (m *MockTFGridClient) LoadGatewayName(nodeID uint32, modelName string) (workloads.GatewayNameProxy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadGatewayName", nodeID, modelName)
	ret0, _ := ret[0].(workloads.GatewayNameProxy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadGatewayName indicates an expected call of LoadGatewayName.
func (mr *MockTFGridClientMockRecorder) LoadGatewayName(nodeID, modelName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadGatewayName", reflect.TypeOf((*MockTFGridClient)(nil).LoadGatewayName), nodeID, modelName)
}

// LoadK8s mocks base method.
func (m *MockTFGridClient) LoadK8s(nodeIDs []uint32, modelName string) (workloads.K8sCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadK8s", nodeIDs, modelName)
	ret0, _ := ret[0].(workloads.K8sCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadK8s indicates an expected call of LoadK8s.
func (mr *MockTFGridClientMockRecorder) LoadK8s(nodeIDs, modelName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadK8s", reflect.TypeOf((*MockTFGridClient)(nil).LoadK8s), nodeIDs, modelName)
}

// LoadNetwork mocks base method.
func (m *MockTFGridClient) LoadNetwork(networkName string) (workloads.ZNet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadNetwork", networkName)
	ret0, _ := ret[0].(workloads.ZNet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadNetwork indicates an expected call of LoadNetwork.
func (mr *MockTFGridClientMockRecorder) LoadNetwork(networkName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadNetwork", reflect.TypeOf((*MockTFGridClient)(nil).LoadNetwork), networkName)
}

// LoadZDB mocks base method.
func (m *MockTFGridClient) LoadZDB(nodeID uint32, modelName string) (workloads.ZDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadZDB", nodeID, modelName)
	ret0, _ := ret[0].(workloads.ZDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadZDB indicates an expected call of LoadZDB.
func (mr *MockTFGridClientMockRecorder) LoadZDB(nodeID, modelName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadZDB", reflect.TypeOf((*MockTFGridClient)(nil).LoadZDB), nodeID, modelName)
}

// RMBCall mocks base method.
func (m *MockTFGridClient) RMBCall(ctx context.Context, twin uint32, fn string, data, result interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RMBCall", ctx, twin, fn, data, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// RMBCall indicates an expected call of RMBCall.
func (mr *MockTFGridClientMockRecorder) RMBCall(ctx, twin, fn, data, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RMBCall", reflect.TypeOf((*MockTFGridClient)(nil).RMBCall), ctx, twin, fn, data, result)
}

// SetNetworkState mocks base method.
func (m *MockTFGridClient) SetNetworkState(nodeContract map[uint32]uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNetworkState", nodeContract)
}

// SetNetworkState indicates an expected call of SetNetworkState.
func (mr *MockTFGridClientMockRecorder) SetNetworkState(nodeContract interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNetworkState", reflect.TypeOf((*MockTFGridClient)(nil).SetNetworkState), nodeContract)
}

// SetNodeDeploymentState mocks base method.
func (m *MockTFGridClient) SetNodeDeploymentState(nodeContracts map[uint32][]uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNodeDeploymentState", nodeContracts)
}

// SetNodeDeploymentState indicates an expected call of SetNodeDeploymentState.
func (mr *MockTFGridClientMockRecorder) SetNodeDeploymentState(nodeContracts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNodeDeploymentState", reflect.TypeOf((*MockTFGridClient)(nil).SetNodeDeploymentState), nodeContracts)
}
